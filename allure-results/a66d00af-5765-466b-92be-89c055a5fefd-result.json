{"name": "File Upload", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=126.0.6478.127)\nStacktrace:\n0   chromedriver                        0x00000001079150e8 chromedriver + 5169384\n1   chromedriver                        0x000000010790cfba chromedriver + 5136314\n2   chromedriver                        0x000000010748936c chromedriver + 402284\n3   chromedriver                        0x000000010745e5f4 chromedriver + 226804\n4   chromedriver                        0x000000010750253d chromedriver + 898365\n5   chromedriver                        0x0000000107518908 chromedriver + 989448\n6   chromedriver                        0x00000001074f9853 chromedriver + 862291\n7   chromedriver                        0x00000001074c95c6 chromedriver + 665030\n8   chromedriver                        0x00000001074c9e4e chromedriver + 667214\n9   chromedriver                        0x00000001078d7d00 chromedriver + 4918528\n10  chromedriver                        0x00000001078dccfd chromedriver + 4939005\n11  chromedriver                        0x00000001078dd3d5 chromedriver + 4940757\n12  chromedriver                        0x00000001078b8de4 chromedriver + 4791780\n13  chromedriver                        0x00000001078dd6c9 chromedriver + 4941513\n14  chromedriver                        0x00000001078aa5b4 chromedriver + 4732340\n15  chromedriver                        0x00000001078fd898 chromedriver + 5073048\n16  chromedriver                        0x00000001078fda57 chromedriver + 5073495\n17  chromedriver                        0x000000010790cb6e chromedriver + 5135214\n18  libsystem_pthread.dylib             0x00007ff805d9e4e1 _pthread_start + 125\n19  libsystem_pthread.dylib             0x00007ff805d99f6b thread_start + 15", "trace": "self = <CrawlReport.Test_Crawl object at 0x121784730>\n\n    @allure.title(\"File Upload\")\n    def test_fileupload(self):\n        crawl = File_Upload()\n        crawl.logout_login()\n>       crawl.crawl()\n\nReports/CrawlReport.py:38: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nmodule/web_file_upload.py:77: in crawl\n    allure.attach(self.driver.get_screenshot_as_png(),name = f\"Screenshot - File Upload\",attachment_type=AttachmentType.PNG)\nvenv/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:832: in get_screenshot_as_png\n    return b64decode(self.get_screenshot_as_base64().encode(\"ascii\"))\nvenv/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:843: in get_screenshot_as_base64\n    return self.execute(Command.SCREENSHOT)[\"value\"]\nvenv/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10f5d6040>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...ff805d9e4e1 _pthread_start + 125\\\\n19  libsystem_pthread.dylib             0x00007ff805d99f6b thread_start + 15\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=126.0.6478.127)\nE       Stacktrace:\nE       0   chromedriver                        0x00000001079150e8 chromedriver + 5169384\nE       1   chromedriver                        0x000000010790cfba chromedriver + 5136314\nE       2   chromedriver                        0x000000010748936c chromedriver + 402284\nE       3   chromedriver                        0x000000010745e5f4 chromedriver + 226804\nE       4   chromedriver                        0x000000010750253d chromedriver + 898365\nE       5   chromedriver                        0x0000000107518908 chromedriver + 989448\nE       6   chromedriver                        0x00000001074f9853 chromedriver + 862291\nE       7   chromedriver                        0x00000001074c95c6 chromedriver + 665030\nE       8   chromedriver                        0x00000001074c9e4e chromedriver + 667214\nE       9   chromedriver                        0x00000001078d7d00 chromedriver + 4918528\nE       10  chromedriver                        0x00000001078dccfd chromedriver + 4939005\nE       11  chromedriver                        0x00000001078dd3d5 chromedriver + 4940757\nE       12  chromedriver                        0x00000001078b8de4 chromedriver + 4791780\nE       13  chromedriver                        0x00000001078dd6c9 chromedriver + 4941513\nE       14  chromedriver                        0x00000001078aa5b4 chromedriver + 4732340\nE       15  chromedriver                        0x00000001078fd898 chromedriver + 5073048\nE       16  chromedriver                        0x00000001078fda57 chromedriver + 5073495\nE       17  chromedriver                        0x000000010790cb6e chromedriver + 5135214\nE       18  libsystem_pthread.dylib             0x00007ff805d9e4e1 _pthread_start + 125\nE       19  libsystem_pthread.dylib             0x00007ff805d99f6b thread_start + 15\n\nvenv/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py:229: NoSuchWindowException"}, "attachments": [{"name": "Dashboard Page", "source": "46a12bc0-91a0-41a5-a3b5-f0780145c4a3-attachment.png", "type": "image/png"}, {"name": "stdout", "source": "bbe32fae-7f30-49c6-95e8-5dd589f4256c-attachment.txt", "type": "text/plain"}], "start": 1721035428327, "stop": 1721035449491, "uuid": "965fc561-6872-431e-9497-4fa6453d7a91", "historyId": "720352ead51184b61bded123056b44d2", "testCaseId": "720352ead51184b61bded123056b44d2", "fullName": "Reports.CrawlReport.Test_Crawl#test_fileupload", "labels": [{"name": "severity", "value": "normal"}, {"name": "parentSuite", "value": "Reports"}, {"name": "suite", "value": "CrawlReport"}, {"name": "subSuite", "value": "Test_Crawl"}, {"name": "host", "value": "Pro66.local"}, {"name": "thread", "value": "3928-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Reports.CrawlReport"}]}